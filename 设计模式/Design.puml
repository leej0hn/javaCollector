@startmindmap
'https://plantuml.com/mindmap-diagram

title 设计模式

+ <&flag>设计模式
++ 创建型模式
+++ 简单工厂模式
++++ 定义
*****: 提供一个创建对象实例的功能，而无须关心其具体实现.
被创建实例的类型可以是接口、抽象类，也可以是具体的类;
++++ 优点
+++++ 帮助封装
+++++ 解耦
++++ 缺点
+++++ 可能增加客户端的复杂度
++++ 本质
+++++ 选择实现
+++ 工厂模式(Factory Method)
++++ 定义
*****: 定义一个用于创建对象的接口，让子类决定实例化哪一个类，
Factory Method使一个类的实例化延迟到其子类;
++++ 优点
+++++ 可以在不知具体实现的情况下编程
+++++ 更容易扩展对象的新版本
++++ 缺点
+++++ 具体产品对象和工厂方法的耦合性
++++ 本质
+++++ 延迟到子类来选择实现
+++ 抽象工厂模式(Abstract Factory)
++++ 定义
*****: 提供一个创建一系列相关或相互依赖对象的接口，
而无需指定它们具体的类;
++++ 优点
+++++ 分离接口和实现
+++++ 使得切换产品簇变得容易
++++ 缺点
+++++ 不容易扩展新的产品
+++++ 容易造成类层次复杂
++++ 本质
+++++ 选择产品簇的实现
+++ 生成器模式(Builder)
++++ 定义
*****: 将一个复杂对象的构建与它的表示分离，
使得同样的构建过程可以创建不同的表示;
++++ 优点
+++++ 松散耦合
+++++ 可以很容易地改变产品的内部表示
+++++ 更好的复用性
++++ 缺点
++++ 本质
+++++ 分离整体构建算法和部件构造
+++ 单例模式
++++ 定义
*****: 保证一个类仅有一个实例，
并提供一个访问它的全局访问点;
++++ 本质
+++++ 控制实例数目
+++ 原型模式（Prototype）
++++ 定义
*****: 用原型实例指定创建对象的各类，
并通过拷贝这些原型创建新的对象;
++++ 优点
+++++ 对客户端隐藏具体的实现类型
+++++ 在运行时动态改变具体的实现类型
++++ 缺点
*****: 每个原型的子类必须实现clone的操作，
尤其在包含引用类型的对象时，clone方法会比较麻烦，
必须要能够递归地让所有的相关对象都要正确地实现克隆。;
++++ 本质
+++++ 克隆生成对象
++ 结构型模式
+++ 适配器模式(Adapter)
++++ 定义
*****: 将一个类的接口转换成客户希望的另一个接口。
适配器模式使得原本由于接口不兼容而不能一起工作
的那些类可以一起工作;
++++ 本质
+++++ 转换匹配，复用功能
+++ 外观模式(Facade)
++++ 定义
*****: 为子系统中的一组接口提供一个一致的界面，
Facade模式定义了一个高层接口，
这个接口使得这一子系统更加容易使用;
++++ 优点
+++++ 松散耦合
+++++ 简单易用
+++++ 更好地划分访问的层次
++++ 缺点
*****: 过多的或者是不太合理的Facade容易让人迷惑。
到底是调用Facade好还是直接调用模块好;
++++ 本质
+++++ 封装交互，简化调用
+++ 组合模式(Composite)
++++ 定义
*****: 将对象组合成树型结构以表示"部分-整体"的层次结构。
组合模式使得用户对单个对象和组合对象的使用具有一致性;
++++ 本质
+++++ 统一叶子对象和组合对象
+++ 桥接模式(Bridge)
++++ 定义
*****: 将抽象部分与它的实现部分分离，
使它们都可以独立地变化;
++++ 优点
+++++ 分离抽象和实现部分
+++++ 更好的扩展性
+++++ 可动态地切换实现
+++++ 可减少子类的个数
++++ 本质
+++++ 分离抽象和实现
+++ 过滤器模式
+++ 享元模式(Flyweight)
++++ 定义
*****: 运用共享技术有效地支持大量细粒度的对象
;
++++ 优点
+++++ 减少对象数量，节省内存空间
++++ 缺点
+++++ 维护共享对象，需要额外开销
++++ 本质
+++++ 分离与共享
+++ 代理模式(Proxy)
++++ 定义
*****: 为其他对象提供一种代理以控制对这个对象的访问
;
++++ 特点
+++++ 远程代理
+++++ 虚代理
+++++ 保护代理
+++++ 智能指引
++++ 本质
+++++ 控制对象访问
+++ 装饰器模式(Decorator)
++++ 定义
*****: 动态地给一个对象添加一些额外的职责。
就增加功能来说，装饰模式比生成子类更为灵活;
++++ 优点
+++++ 比继承更灵活
+++++ 更容易复用功能
+++++ 简化高层定义
++++ 缺点
+++++ 产生很多细粒度对象
++++ 本质
+++++ 动态组合
-- 行为型模式
--- 策略模式(Strategy)
---- 定义
----- 定义一系列的算法，把它们一个个封装越来，\l并且使它们可相互替换。使得算法可独立于使用它的客户而变化
---- 优点
----- 定义一系列算法
----- 避免多重条件语句
----- 更好的扩展性
---- 缺点
----- 客户必须了解每种策略的不同
----- 增加了对象数目
----- 只适合扁平的算法结构
---- 本质
----- 分离算法，选择实现
--- 观察者模式(Observer)
---- 定义
----- 定义对象间的一种一对多的依赖关系。\l当一个对象的状态发生改变时，所有依赖于它的对象\l都得到通知并被自动更新;
---- 优点
----- 实现了观察者和目标之间的抽象耦合
----- 观察者实现了动态联动
----- 支持广播通信
---- 缺点
----- 可能会引起无谓的操作
---- 本质
----- 触发联动
--- 责任链模式(Chain of Responsibility)
---- 定义
----- 使多个对象都有机会处理请求，从而避免请求的发送者\l和接收者之间的耦合关系。将这些对象连成一条链，并沿着这条链传递该请求，\l直到有一个对象处理它为止
---- 优点
----- 请求者和接收者松散耦合
----- 动态组合职责
---- 缺点
----- 产生很多细粒度对象
----- 不一定能被处理
---- 本质
----- 分离职责，动态组合
--- 命令模式(Command)
---- 定义
----- 将一个请求封装为一个对象，从而使你可用不同的请求对\l客户进行参数化，对请求排队或记录请求日志，以及支持可撤销的操作
---- 优点
----- 更松散的耦合
----- 更动态的控制
----- 很自然的复合命令
----- 更好的扩展性
---- 本质
----- 封装请求
--- 解释器模式(Interpreter)
---- 定义
----- 给定一个语言，定义它的文法的一种表示，并定义一个解释器，\l这个解释器使用该表示来解释语言中的句子
---- 优点
----- 易于实现语法
----- 易于扩展新的语法
---- 缺点
----- 不适合复杂的语法
---- 本质
----- 分离实现，解释执行
--- 迭代器模式(Iterator)
---- 定义
----- 提供一种方法顺序访问一个聚合对象中的各个元素，\l而又不需要暴露该对象的内部表示
---- 本质
----- 控制访问聚合对象中的元素
--- 中介者模式(Mediator)
---- 定义
----- 用一个中介对象来封装一系列的对象交互。\l中介者使得各对象不需要显式地相互引用，从而使其耦合松散，\l而且可以独立地改变它们之间的交互
---- 优点
----- 松散耦合
----- 集中控制交互
----- 多对多变友一对多
---- 缺点
----- 过度集中化
---- 本质
----- 封装交互
--- 备忘录模式(Memento)
---- 定义
----- 在不破坏封装性的前提下，捕获一个对象的内部状态，\l并在该对象之外保存这个状态。这样以后就可将该\l对象恢复到原先保存的状态;
---- 优点
----- 更好的封装性
----- 简化了原发器
----- 窄接口和宽接口
---- 缺点
----- 可能会导致高开销
---- 本质
----- 保存和恢复内部状态
--- 状态模式(State)
---- 定义
----- 允许一个对象在其内部状态改变时改变它的行为。\l对象看越来似乎修改了它的类;
---- 优点
----- 简化应用逻辑控制
----- 更好地分离状态和行为
----- 更好的扩展性
----- 显式化进行状态转换
---- 缺点
----- 一个状态对应一个状态处理类，会使得程序引入\l太多的状态类，导致程序变得杂乱
---- 本质
----- 根据状态来分离和选择行为
--- 空对象模式
--- 模板模式(Template Method)
---- 定义
----- 定义一个操作中的算法的骨架，而将一些步骤延迟到子类中。\l模板方法使得子类可以不改变一个算法的结构即可重定义该算法的\l某些特定步骤;
---- 优点
----- 实现代码复用
---- 缺点
----- 算法骨架不容易升级
---- 本质
----- 固定算法骨架
--- 访问者模式(Visitor)
---- 定义
----- 表示一个作用于某对象结构中的各元素的操作。\l它使你可以在不改变各元素的类的\l的前提下定义作用于这些元素的新操作
---- 优点
----- 好的扩展性
----- 好的复用性
----- 分离无关行为
---- 缺点
----- 对象结构变化很困难
----- 破坏封装
---- 本质
----- 预留能通路，回调实现
-- 6大原则
--- 开闭原则
---- 对扩展开放，对修改关闭\l即对修改关闭（使用方），对扩展开放（提供方）即当我们给类增加新功能的时候，尽量不修改代码或尽可能少修改代码。\l即当我们给类增加新功能的时候，尽量不修改代码或尽可能少修改代码。
--- 里氏代换原则
---- 对开闭原则的补充。\l所有引用基类（父类）的地方必须能透明地使用其子类的对象。
--- 依赖倒转原则
---- 针对接口编程，依赖于抽象而不依赖于具体。(是开闭原则的基础)
--- 接口隔离原则
---- 使用多个隔离的接口，比使用单个接口要好。（降低类之间的耦合度）
--- 迪米特法则又称最少知道原则
---- 个实体应当尽量少地与其他实体之间发生相互作用，使得系统功能模块相对独立。
--- 合成复用原则
---- 尽量使用合成/聚合的方式，而不是使用继承。
center footer JavaCollector
@endmindmap
